/* The following code was generated by JFlex 1.6.1 */

package is.iclt.icenlp.core.icestagger;
import java.util.*;
import java.io.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>LatinTokenizer.flex</tt>
 */
public class LatinTokenizer extends Tokenizer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\15\1\100\1\100\1\14\22\0\1\13\1\52\1\54"+
    "\1\30\1\37\1\31\1\30\1\36\1\46\1\42\1\54\1\31\1\51"+
    "\1\27\1\26\1\24\3\20\1\45\6\20\1\6\1\34\1\44\1\41"+
    "\1\50\1\53\1\32\2\33\1\74\1\5\1\73\1\23\1\77\1\21"+
    "\1\11\3\33\1\75\1\72\1\40\1\22\1\33\1\76\1\10\1\3"+
    "\2\33\1\25\1\33\1\47\1\33\1\1\1\30\1\12\1\43\1\7"+
    "\1\54\2\33\1\74\1\5\1\73\1\23\1\77\1\21\1\11\3\33"+
    "\1\75\1\72\1\40\1\22\1\33\1\76\1\10\1\3\2\33\1\25"+
    "\1\35\1\47\1\33\3\54\1\30\6\0\1\16\32\0\1\13\37\54"+
    "\27\57\1\54\37\57\1\54\70\57\2\4\115\57\1\2\u01f0\0\220\60"+
    "\u0200\0\140\61\12\62\206\61\12\62\6\61\120\0\60\61\100\0\12\17"+
    "\u0136\0\146\63\12\64\20\63\146\0\12\17\166\0\12\17\166\0\12\17"+
    "\166\0\12\17\166\0\12\17\166\0\12\17\166\0\12\17\166\0\12\17"+
    "\166\0\12\17\140\0\12\17\166\0\12\17\106\0\12\17\u0116\0\12\17"+
    "\106\0\12\17\146\0\u0100\66\u05e0\0\12\17\46\0\12\17\u012c\0\12\17"+
    "\200\0\12\17\246\0\12\17\6\0\12\17\266\0\12\17\126\0\12\17"+
    "\206\0\12\17\6\0\12\17\166\0\60\63\u0200\0\u0100\60\16\13\2\0"+
    "\30\54\1\56\1\56\33\54\u0fbb\0\1\55\37\54\40\0\300\65\60\0"+
    "\140\66\u0270\0\u19c0\67\100\0\u5200\67\u0620\0\12\17\u02a6\0\12\17\6\0"+
    "\40\63\12\17\126\0\40\66\120\0\12\17\26\0\12\17\126\0\12\17"+
    "\u0196\0\12\17\u2bb6\0\120\66\100\71\60\70\u0790\71\u1b50\0\u02b0\61\160\0"+
    "\220\61\20\0\12\17\113\0\73\65\u0500\0\12\17\u0bbc\0\12\17\200\0"+
    "\12\17\74\0\12\17\220\0\12\17\u0116\0\12\17\u01d6\0\12\17\u0176\0"+
    "\12\17\146\0\12\17\u0216\0\12\17\u5176\0\12\17\346\0\12\17\u6c74\0"+
    "\62\17\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u280f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\3\3\2\2\1\3\1\2\1\4"+
    "\1\0\1\5\2\6\2\3\1\2\1\3\1\7\1\2"+
    "\1\3\1\2\1\3\6\2\1\7\2\2\1\10\2\11"+
    "\2\12\1\13\1\14\1\15\1\1\4\0\1\16\3\0"+
    "\1\16\2\0\1\17\1\0\1\20\2\3\1\0\1\2"+
    "\1\16\3\0\1\16\1\0\1\16\1\2\1\0\1\16"+
    "\6\0\2\3\3\16\5\0\1\3\1\0\1\3\2\0"+
    "\1\21\2\0\1\21\1\0\1\22\2\0\1\21\1\0"+
    "\1\22\2\21\1\23\1\22";

  private static int [] zzUnpackAction() {
    int [] result = new int[106];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\u0208\0\101\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e"+
    "\0\u03cf\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555\0\u0596"+
    "\0\u05d7\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c\0\u075d\0\u0249"+
    "\0\u02cb\0\u079e\0\u07df\0\u0820\0\u0861\0\u08a2\0\101\0\101"+
    "\0\101\0\u08e3\0\u0924\0\u01c7\0\u0965\0\u09a6\0\101\0\u09e7"+
    "\0\u0555\0\u0618\0\u0a28\0\u0a28\0\u0a69\0\u0249\0\u0aaa\0\u0aeb"+
    "\0\u0b2c\0\u0b6d\0\u04d3\0\u0bae\0\u0bef\0\u0c30\0\u0c71\0\u0cb2"+
    "\0\u05d7\0\u0cf3\0\u0659\0\u0d34\0\u0d75\0\u0db6\0\u0df7\0\u0e38"+
    "\0\u0e79\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe\0\u0c30\0\u01c7"+
    "\0\u0fff\0\u1040\0\u1081\0\u10c2\0\u1103\0\u1144\0\u1185\0\u11c6"+
    "\0\u1207\0\u1248\0\u1289\0\u01c7\0\u12ca\0\u130b\0\u134c\0\u138d"+
    "\0\u13ce\0\u140f\0\u1450\0\u1491\0\u14d2\0\u1513\0\u1554\0\u1595"+
    "\0\101\0\u0f3c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[106];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\4\1\6\1\7\1\10"+
    "\1\11\1\5\1\12\1\13\1\14\2\15\1\16\1\17"+
    "\1\20\1\6\1\21\1\22\1\23\1\24\1\25\1\12"+
    "\1\10\1\12\1\5\1\7\1\26\1\12\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\17\1\35\1\5\1\12"+
    "\1\36\2\37\1\12\1\40\1\41\1\4\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\2"+
    "\6\5\104\0\1\53\5\0\1\53\72\0\4\4\2\0"+
    "\2\4\7\0\3\4\1\0\1\4\5\0\1\4\1\0"+
    "\1\4\2\0\1\4\6\0\1\4\7\0\1\4\12\0"+
    "\6\4\3\0\1\4\1\5\1\4\1\5\1\0\1\54"+
    "\2\5\6\0\1\54\3\5\1\0\1\5\1\55\1\54"+
    "\1\0\1\54\1\56\1\5\1\0\1\5\2\0\1\5"+
    "\4\0\1\54\1\0\1\5\7\0\1\4\12\0\6\5"+
    "\3\0\1\4\1\5\1\4\1\6\1\57\1\54\1\11"+
    "\1\5\6\0\1\54\1\5\1\6\1\5\1\0\1\5"+
    "\1\55\1\60\1\0\1\54\1\56\1\5\1\57\1\5"+
    "\1\0\1\61\1\5\1\57\1\62\2\0\1\54\1\62"+
    "\1\5\7\0\1\4\12\0\6\5\6\0\1\63\2\0"+
    "\1\63\11\0\1\63\4\0\1\64\6\0\1\65\1\63"+
    "\1\57\1\0\1\63\3\0\1\63\35\0\1\54\1\0"+
    "\1\54\1\0\3\54\6\0\4\54\1\0\3\54\1\0"+
    "\1\54\1\56\1\54\1\0\1\54\2\0\1\54\4\0"+
    "\1\54\1\0\1\54\22\0\6\54\3\0\1\4\1\5"+
    "\1\4\1\11\1\57\1\54\1\11\1\5\6\0\1\54"+
    "\1\5\1\11\1\5\1\0\1\5\1\55\1\60\1\0"+
    "\1\54\1\56\1\5\1\57\1\5\1\0\1\61\1\5"+
    "\1\0\1\61\2\0\1\54\1\61\1\5\7\0\1\4"+
    "\12\0\6\5\14\0\1\66\1\14\2\15\36\0\1\66"+
    "\1\15\37\0\1\15\76\0\1\15\1\67\2\70\36\0"+
    "\1\15\1\70\41\0\2\16\24\0\1\16\14\0\1\16"+
    "\1\0\1\16\17\0\1\54\1\0\1\54\1\0\3\54"+
    "\5\0\1\16\1\17\3\54\1\0\3\54\1\0\1\54"+
    "\1\56\1\54\1\0\1\54\2\0\1\54\4\0\1\17"+
    "\1\0\1\54\12\0\1\16\1\0\1\16\5\0\6\54"+
    "\3\0\1\4\1\21\1\4\1\5\1\0\1\54\2\5"+
    "\6\0\1\54\3\5\1\0\1\5\1\55\1\54\1\0"+
    "\1\54\1\56\1\5\1\0\1\5\2\0\1\5\4\0"+
    "\1\54\1\0\1\5\7\0\1\4\12\0\6\5\3\0"+
    "\1\4\1\71\1\4\1\5\1\0\1\54\2\5\6\0"+
    "\1\54\3\5\1\0\1\5\1\55\1\54\1\0\1\54"+
    "\1\56\1\5\1\0\1\5\2\0\1\5\4\0\1\54"+
    "\1\0\1\5\7\0\1\4\12\0\6\5\25\0\1\22"+
    "\56\0\1\4\1\5\1\4\1\5\1\0\1\54\2\5"+
    "\6\0\1\54\3\5\1\0\1\72\1\55\1\54\1\0"+
    "\1\54\1\56\1\5\1\0\1\5\2\0\1\5\4\0"+
    "\1\54\1\0\1\5\7\0\1\4\12\0\6\5\4\0"+
    "\1\54\1\0\1\54\1\0\3\54\6\0\4\54\1\0"+
    "\1\54\1\24\1\54\1\0\1\54\1\56\1\54\1\0"+
    "\1\54\2\0\1\54\4\0\1\54\1\0\1\54\2\0"+
    "\2\37\16\0\6\54\4\0\1\54\1\0\1\54\1\0"+
    "\3\54\6\0\4\54\1\0\2\54\1\73\1\0\1\54"+
    "\1\56\1\54\1\0\1\54\2\0\1\54\4\0\1\54"+
    "\1\0\1\54\1\74\21\0\6\54\3\0\1\4\1\5"+
    "\1\4\1\75\1\0\1\54\1\75\1\5\6\0\1\54"+
    "\1\5\1\75\1\5\1\0\1\5\1\55\1\76\1\0"+
    "\1\54\1\56\1\5\1\0\1\5\1\65\1\63\1\5"+
    "\1\0\1\63\2\0\1\54\1\63\1\5\7\0\1\4"+
    "\12\0\6\5\6\0\1\61\1\57\1\0\1\61\11\0"+
    "\1\61\4\0\1\77\4\0\1\57\2\0\1\61\2\0"+
    "\1\61\3\0\1\61\34\0\1\4\1\5\1\4\1\5"+
    "\1\0\1\100\2\5\6\0\1\54\3\5\1\0\1\5"+
    "\1\55\1\54\1\0\1\54\1\56\1\5\1\0\1\5"+
    "\2\0\1\5\4\0\1\54\1\0\1\5\7\0\1\4"+
    "\12\0\6\5\6\0\1\101\14\0\1\101\17\0\1\101"+
    "\3\0\1\101\37\0\1\62\1\57\1\0\1\61\11\0"+
    "\1\62\4\0\1\77\4\0\1\57\2\0\1\61\1\0"+
    "\1\57\1\62\3\0\1\62\41\0\1\102\33\0\1\103"+
    "\64\0\1\104\14\0\1\105\1\106\40\0\1\62\1\57"+
    "\1\0\1\61\11\0\1\62\4\0\1\77\4\0\1\57"+
    "\2\0\1\61\1\0\1\57\1\62\3\0\1\62\1\107"+
    "\102\0\1\36\101\0\2\37\105\0\1\42\101\0\2\43"+
    "\35\0\2\16\24\0\1\16\13\0\1\43\1\44\1\0"+
    "\1\16\77\0\2\45\33\0\2\16\24\0\1\16\14\0"+
    "\1\16\1\45\1\46\104\0\2\51\12\0\1\110\100\0"+
    "\1\54\1\0\1\54\1\0\3\54\6\0\4\54\1\0"+
    "\3\54\1\0\1\54\1\56\1\54\1\0\1\54\2\0"+
    "\1\111\4\0\1\54\1\0\1\54\22\0\1\112\1\54"+
    "\1\113\3\54\4\0\1\114\1\0\1\114\2\0\2\114"+
    "\6\0\4\114\1\0\3\114\3\0\1\114\1\0\1\114"+
    "\2\0\1\114\4\0\1\114\1\0\1\114\22\0\6\114"+
    "\4\0\1\54\1\0\1\54\1\57\3\54\6\0\4\54"+
    "\1\0\3\54\1\0\1\54\1\56\1\54\1\57\1\54"+
    "\2\0\1\54\4\0\1\54\1\0\1\54\22\0\6\54"+
    "\6\0\1\63\2\0\1\63\11\0\1\63\14\0\1\63"+
    "\2\0\1\63\3\0\1\63\37\0\1\63\2\0\1\63"+
    "\11\0\1\63\4\0\1\64\7\0\1\63\2\0\1\63"+
    "\3\0\1\63\47\0\1\70\76\0\1\70\1\67\2\70"+
    "\36\0\2\70\24\0\1\4\1\5\1\4\1\5\1\0"+
    "\1\54\2\5\6\0\1\54\1\5\1\115\1\5\1\0"+
    "\1\5\1\55\1\54\1\0\1\54\1\56\1\5\1\0"+
    "\1\5\2\0\1\5\4\0\1\54\1\0\1\5\7\0"+
    "\1\4\12\0\6\5\3\0\1\4\1\5\1\4\1\5"+
    "\1\0\1\54\2\5\6\0\1\54\3\5\1\0\1\116"+
    "\1\55\1\54\1\0\1\54\1\56\1\5\1\0\1\5"+
    "\2\0\1\5\4\0\1\54\1\0\1\5\7\0\1\4"+
    "\12\0\6\5\51\0\1\74\32\0\1\4\1\5\1\4"+
    "\1\75\1\0\1\54\1\75\1\5\6\0\1\54\1\5"+
    "\1\75\1\5\1\0\1\5\1\55\1\54\1\0\1\54"+
    "\1\56\1\5\1\0\1\5\1\0\1\63\1\5\1\0"+
    "\1\63\2\0\1\54\1\63\1\5\7\0\1\4\12\0"+
    "\6\5\4\0\1\54\1\0\1\117\1\0\1\54\1\117"+
    "\1\54\6\0\2\54\1\117\1\54\1\0\3\54\1\0"+
    "\1\54\1\56\1\54\1\0\1\54\1\0\1\63\1\54"+
    "\1\0\1\63\2\0\1\54\1\63\1\54\22\0\6\54"+
    "\7\0\1\57\25\0\1\57\47\0\1\54\1\0\1\54"+
    "\1\0\3\54\6\0\4\54\1\0\3\54\1\0\1\54"+
    "\1\56\1\54\1\0\1\54\2\0\1\120\4\0\1\54"+
    "\1\0\1\54\22\0\6\54\10\0\1\102\33\0\1\121"+
    "\64\0\1\104\100\0\1\104\14\0\1\105\101\0\1\106"+
    "\75\0\1\57\42\0\1\122\4\0\1\122\72\0\1\54"+
    "\1\0\1\54\1\0\3\54\6\0\4\54\1\0\3\54"+
    "\1\0\1\54\1\56\1\54\1\0\1\54\2\0\1\54"+
    "\4\0\1\54\1\0\1\54\22\0\4\54\1\123\1\54"+
    "\4\0\1\54\1\0\1\54\1\0\3\54\6\0\4\54"+
    "\1\0\3\54\1\0\1\54\1\56\1\54\1\0\1\54"+
    "\2\0\1\54\4\0\1\54\1\0\1\54\22\0\1\54"+
    "\1\124\4\54\4\0\1\54\1\0\1\54\1\0\3\54"+
    "\6\0\4\54\1\0\3\54\1\0\1\54\1\56\1\54"+
    "\1\0\1\54\2\0\1\125\4\0\1\54\1\0\1\54"+
    "\22\0\6\54\4\0\1\114\1\0\1\114\2\0\2\114"+
    "\6\0\4\114\1\0\1\114\1\126\1\114\3\0\1\114"+
    "\1\0\1\114\2\0\1\114\4\0\1\114\1\0\1\114"+
    "\22\0\6\114\3\0\1\127\1\5\1\4\1\5\1\130"+
    "\1\54\1\131\1\5\6\0\1\54\3\5\1\0\1\5"+
    "\1\55\1\54\1\0\1\54\1\56\1\5\1\0\1\5"+
    "\2\0\1\5\4\0\1\54\1\0\1\5\7\0\1\4"+
    "\12\0\6\5\3\0\1\4\1\5\1\4\1\5\1\0"+
    "\1\54\2\5\6\0\1\54\3\5\1\0\1\5\1\132"+
    "\1\54\1\0\1\54\1\56\1\5\1\0\1\5\2\0"+
    "\1\5\4\0\1\54\1\0\1\5\7\0\1\4\12\0"+
    "\6\5\44\0\1\121\42\0\1\133\76\0\1\54\1\0"+
    "\1\54\1\0\3\54\6\0\4\54\1\0\3\54\1\0"+
    "\1\54\1\56\1\54\1\0\1\54\2\0\1\54\4\0"+
    "\1\54\1\0\1\54\22\0\5\54\1\134\4\0\1\134"+
    "\1\0\1\54\1\0\3\54\6\0\4\54\1\0\3\54"+
    "\1\0\1\54\1\56\1\54\1\0\1\54\2\0\1\54"+
    "\4\0\1\54\1\0\1\54\22\0\6\54\4\0\1\54"+
    "\1\0\1\54\1\0\3\54\6\0\4\54\1\0\3\54"+
    "\1\0\1\54\1\56\1\54\1\0\1\54\2\0\1\54"+
    "\4\0\1\54\1\0\1\54\22\0\3\54\1\134\2\54"+
    "\4\0\1\135\1\0\1\135\2\0\2\135\6\0\1\114"+
    "\3\135\1\0\1\135\1\126\1\114\3\0\1\135\1\0"+
    "\1\135\2\0\1\135\4\0\1\114\1\0\1\135\22\0"+
    "\6\135\3\0\4\4\1\130\1\0\2\4\7\0\3\4"+
    "\1\0\1\4\5\0\1\4\1\0\1\4\2\0\1\4"+
    "\6\0\1\4\7\0\1\4\12\0\6\4\25\0\1\136"+
    "\56\0\1\4\1\5\1\4\1\5\1\130\1\54\2\5"+
    "\6\0\1\54\3\5\1\0\1\5\1\55\1\54\1\0"+
    "\1\54\1\56\1\5\1\0\1\5\2\0\1\5\4\0"+
    "\1\54\1\0\1\5\7\0\1\4\12\0\6\5\4\0"+
    "\1\137\1\0\1\137\1\0\1\54\2\137\6\0\4\137"+
    "\1\0\1\137\1\54\1\137\1\0\1\54\1\56\1\137"+
    "\1\0\1\137\2\0\1\137\4\0\1\137\1\0\1\137"+
    "\22\0\6\137\7\0\1\140\75\0\1\141\1\0\1\141"+
    "\2\0\2\141\6\0\1\114\3\141\1\0\1\141\1\126"+
    "\1\114\3\0\1\141\1\0\1\141\2\0\1\141\4\0"+
    "\1\114\1\0\1\141\22\0\6\141\25\0\1\142\57\0"+
    "\1\137\1\0\1\137\1\143\1\54\2\137\6\0\4\137"+
    "\1\144\1\137\1\132\1\137\1\0\1\54\1\56\1\137"+
    "\1\0\1\137\2\0\1\137\4\0\1\137\1\0\1\137"+
    "\22\0\6\137\4\0\1\145\1\0\1\145\1\0\3\145"+
    "\6\0\4\145\1\0\1\145\1\0\1\145\3\0\1\145"+
    "\1\0\1\145\2\0\1\145\4\0\1\145\1\0\1\145"+
    "\22\0\6\145\4\0\1\146\1\0\1\146\2\0\2\146"+
    "\6\0\1\114\3\146\1\0\1\146\1\126\1\114\3\0"+
    "\1\146\1\0\1\146\2\0\1\146\4\0\1\114\1\0"+
    "\1\146\22\0\6\146\4\0\1\147\1\0\1\147\2\0"+
    "\2\147\6\0\4\147\1\0\1\147\1\0\1\147\3\0"+
    "\1\147\1\0\1\147\2\0\1\147\4\0\1\147\1\0"+
    "\1\147\22\0\6\147\21\0\1\150\24\0\1\150\36\0"+
    "\1\144\1\0\5\144\6\0\16\144\1\0\4\144\2\0"+
    "\3\144\1\0\1\144\1\0\1\144\16\0\6\144\4\0"+
    "\1\145\1\0\1\145\1\0\3\145\1\151\5\0\4\145"+
    "\1\0\1\145\1\0\1\145\3\0\1\145\1\0\1\145"+
    "\2\0\1\145\4\0\1\145\1\0\1\145\22\0\6\145"+
    "\4\0\1\152\1\0\1\152\2\0\2\152\6\0\1\114"+
    "\3\152\1\0\1\152\1\126\1\114\3\0\1\152\1\0"+
    "\1\152\2\0\1\152\4\0\1\114\1\0\1\152\22\0"+
    "\6\152\4\0\1\147\1\0\1\147\1\143\1\0\2\147"+
    "\6\0\4\147\1\144\1\147\1\142\1\147\3\0\1\147"+
    "\1\0\1\147\2\0\1\147\4\0\1\147\1\0\1\147"+
    "\22\0\6\147\21\0\1\150\3\0\1\144\20\0\1\150"+
    "\33\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5590];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\1\11\1\1\1\0\32\1\3\11"+
    "\1\1\4\0\1\11\3\0\1\1\2\0\1\1\1\0"+
    "\3\1\1\0\2\1\3\0\1\1\1\0\2\1\1\0"+
    "\1\1\6\0\5\1\5\0\1\1\1\0\1\1\2\0"+
    "\1\1\2\0\1\1\1\0\1\1\2\0\1\1\1\0"+
    "\3\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[106];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public ArrayList<Token> readSentence() throws IOException {
    ArrayList<Token> sentence = new ArrayList<Token>();
    Token token, lastNonSpace = null, lastSpace = null;

    while((token = yylex()) != null) {
        if(token.isSpace()) {
            if(token.type == Token.TOK_NEWLINES) {
                if(!sentence.isEmpty()) return sentence;
            }
            lastSpace = token;
        } else {
            if(!sentence.isEmpty()) {
                if(lastSpace != null && lastSpace.type != Token.TOK_SPACE &&
                   token.isCapitalized())
                {
                    yypushback(yylength());
                    return sentence;
                } else if(lastNonSpace != null &&
                        lastNonSpace.value.endsWith(".") &&
                        token.isCapitalized())
                {
                    yypushback(yylength());
                    return sentence;
                } else if(token.type == Token.TOK_SENT_FINAL) {
                    sentence.add(token);
                    return sentence;
                }
            }
            sentence.add(token);
            lastNonSpace = token;
        }
    }
    if(sentence.isEmpty()) return null;
    return sentence;
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LatinTokenizer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 514) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return(new Token(Token.TOK_UNKNOWN,yytext(),yychar));
            }
          case 20: break;
          case 2: 
            { return(new Token(Token.TOK_SYMBOL,yytext(),yychar));
            }
          case 21: break;
          case 3: 
            { return(new Token(Token.TOK_LATIN,yytext(),yychar));
            }
          case 22: break;
          case 4: 
            { return(new Token(Token.TOK_SPACE,yytext(),yychar));
            }
          case 23: break;
          case 5: 
            { return(new Token(Token.TOK_NEWLINE,yytext(),yychar));
            }
          case 24: break;
          case 6: 
            { return(new Token(Token.TOK_NUMBER,yytext(),yychar));
            }
          case 25: break;
          case 7: 
            { return(new Token(Token.TOK_SENT_FINAL,yytext(),yychar));
            }
          case 26: break;
          case 8: 
            { return(new Token(Token.TOK_GREEK,yytext(),yychar));
            }
          case 27: break;
          case 9: 
            { return(new Token(Token.TOK_ARABIC,yytext(),yychar));
            }
          case 28: break;
          case 10: 
            { return(new Token(Token.TOK_NAGARI,yytext(),yychar));
            }
          case 29: break;
          case 11: 
            { return(new Token(Token.TOK_KANA,yytext(),yychar));
            }
          case 30: break;
          case 12: 
            { return(new Token(Token.TOK_HANGUL,yytext(),yychar));
            }
          case 31: break;
          case 13: 
            { return(new Token(Token.TOK_HANZI,yytext(),yychar));
            }
          case 32: break;
          case 14: 
            { return(new Token(Token.TOK_SMILEY,yytext(),yychar));
            }
          case 33: break;
          case 15: 
            { return(new Token(Token.TOK_SPACES,yytext(),yychar));
            }
          case 34: break;
          case 16: 
            { return(new Token(Token.TOK_NEWLINES,yytext(),yychar));
            }
          case 35: break;
          case 17: 
            { return(new Token(Token.TOK_URL,yytext(),yychar));
            }
          case 36: break;
          case 18: 
            { return(new Token(Token.TOK_EMAIL,yytext(),yychar));
            }
          case 37: break;
          case 19: 
            { sentID = yytext().substring(6, yylength()-1);
            }
          case 38: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
